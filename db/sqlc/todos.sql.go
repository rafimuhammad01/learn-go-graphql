// Code generated by sqlc. DO NOT EDIT.
// source: todos.sql

package db

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (name, description, user_id) VALUES ($1, $2, $3) RETURNING id, name, description, user_id, created_at
`

type CreateTodoParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	UserID      int64          `json:"user_id"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.queryRow(ctx, q.createTodoStmt, createTodo, arg.Name, arg.Description, arg.UserID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id=$1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTodoStmt, deleteTodo, id)
	return err
}

const editTodo = `-- name: EditTodo :one
UPDATE todos
SET name=$2, description=$3
WHERE id = $1
RETURNING id, name, description, user_id, created_at
`

type EditTodoParams struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) EditTodo(ctx context.Context, arg EditTodoParams) (Todo, error) {
	row := q.queryRow(ctx, q.editTodoStmt, editTodo, arg.ID, arg.Name, arg.Description)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getTodo = `-- name: GetTodo :one
SELECT id, name, description, user_id, created_at FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.queryRow(ctx, q.getTodoStmt, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, name, description, user_id, created_at FROM todos
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTodosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]Todo, error) {
	rows, err := q.query(ctx, q.listTodosStmt, listTodos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
